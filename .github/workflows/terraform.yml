name: "Terraform"

on:
  push:
    branches:
      - train
  pull_request:

defaults:
  run:
    working-directory: ./infrastructure
    
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-20.04
    outputs:
      gpuaddress: ${{ steps.tfoutput.outputs.address }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/train' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
      
      - name : Terraform output
        id: tfoutput
        if: github.ref == 'refs/heads/train' && github.event_name == 'push'
        run : echo "::set-output name=address::$(terraform output -raw gpu-instance-address)"


  modelcomputation:
    name: "GPU remote Computation"
    needs : terraform
    runs-on: ubuntu-20.04
      
    steps:
      - name: Test gpu address output
        if: github.ref == 'refs/heads/train' && github.event_name == 'push'
        run: echo ${{needs.terraform.outputs.gpuaddress}}
      
      - name : SSH Connection
        if: github.ref == 'refs/heads/train' && github.event_name == 'push'
        env:
            PRIVATE_KEY: ${{ secrets.AWS_EC2_PRIVATE_KEY  }}
        run : |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{needs.terraform.outputs.gpuaddress}} '
            echo "$(whoami)"
          '
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Destroy
      if: github.ref == 'refs/heads/train' && github.event_name == 'push'
      run: terraform destroy -auto-approve